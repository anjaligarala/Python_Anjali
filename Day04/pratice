>>> l = [1,2,3,4,5] 
>>> type(l) 
<class 'list'>
>>> l = ["anjali","sohil"] 
>>> l[0] 
'anjali'
>>> l = ["anjali","sohil", 1, 2,3,4,5] 
>>> l[0]
'anjali'
>>> l[1] 
'sohil'
>>> dir(l)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> print(l)
['anjali', 'sohil', 1, 2, 3, 4, 5]
>>> print(len(0))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: object of type 'int' has no len()
>>> print(len[1,4])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'builtin_function_or_method' object is not subscriptable
>>> print(l[1,4])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list indices must be integers or slices, not tuple
>>> print(l[1:4])
['sohil', 1, 2]
>>> l = (1,2,3,4,5,6,7,8,9,10)
>>> len(l)
10
>>> l[3] = 11
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> l = [1,2,3,4,5,6,7,8,9,10] 
>>> l[3] = 11
>>> print(l)
[1, 2, 3, 11, 5, 6, 7, 8, 9, 10]
>>> l.append[12]   
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'builtin_function_or_method' object is not subscriptable
>>> l.append(12) 
>>> print(l)
[1, 2, 3, 11, 5, 6, 7, 8, 9, 10, 12]
>>> l
[1, 2, 3, 11, 5, 6, 7, 8, 9, 10, 12]
>>> help(l.append)
Help on built-in function append:

append(object, /) method of builtins.list instance
    Append object to the end of the list.

>>> help(l.insert) 
Help on built-in function insert:

insert(index, object, /) method of builtins.list instance
    Insert object before index.

>>> l.insert(5,33)
>>> l
[1, 2, 3, 11, 5, 33, 6, 7, 8, 9, 10, 12]
>>> l.insert(2,"anjali")
>>> l
[1, 2, 'anjali', 3, 11, 5, 33, 6, 7, 8, 9, 10, 12]
>>>
>>> 
>>> [1,2,3] + [4,5,6] 
[1, 2, 3, 4, 5, 6]
>>> sohil in l 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sohil' is not defined
>>> "sohil" in l
False
>>> 2 in l
True
>>> len(l) 
13
>>> max(l) 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: '>' not supported between instances of 'str' and 'int'
>>> dir(l) 
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> max(l) 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: '>' not supported between instances of 'str' and 'int'
>>> l2 = [1,2,3,4,5,6,7,8,9,10] 
>>> max(l2) 
10
>>> min(l2)
1
>>> l2 = [1,2,3,4,5,6,7,8,9,10,10,2,3,4]
>>> dir(l2) 
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> help(l2.count)
Help on built-in function count:

count(value, /) method of builtins.list instance
    Return number of occurrences of value.

>>> (l2.count)     
<built-in method count of list object at 0x0000023C15053880>
>>>
>>> l2.count
<built-in method count of list object at 0x0000023C15053880>
>>> count(l2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'count' is not defined
>>> l2.count(l2) 
0
>>> help(l.append)
Help on built-in function append:

append(object, /) method of builtins.list instance
    Append object to the end of the list.

>>> l2.append([1,2,3])    
>>> l2
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 2, 3, 4, [1, 2, 3]]
>>> l2.append[1,2,3)   
  File "<stdin>", line 1
    l2.append[1,2,3)
                   ^
SyntaxError: closing parenthesis ')' does not match opening parenthesis '['
>>> l2.append(1,2,3) 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: append() takes exactly one argument (3 given)
>>> l2                
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 2, 3, 4, [1, 2, 3]]
>>> l2.inster(2,[1,2,3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'inster'
>>> l2.insert(2,[1,2,3]) 
>>> l2
[1, 2, [1, 2, 3], 3, 4, 5, 6, 7, 8, 9, 10, 10, 2, 3, 4, [1, 2, 3]]
>>> l2[0] 
1
>>> l2[1] 
2
>>> l2[2] 
[1, 2, 3]
>>> l2[20] 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range
>>> l2[2[2][0]]
<stdin>:1: SyntaxWarning: 'int' object is not subscriptable; perhaps you missed a comma?
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not subscriptable
>>> l2[2][0]   
1
>>> l2[16][1]  
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range
>>>
>>> len[l2] 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'builtin_function_or_method' object is not subscriptable
>>> l2
[1, 2, [1, 2, 3], 3, 4, 5, 6, 7, 8, 9, 10, 10, 2, 3, 4, [1, 2, 3]]
>>> len(l2) 
16
>>> l2[15][1] 
2
>>> l2[-1][1] 
2
>>> help(l2.extend) 
Help on built-in function extend:

extend(iterable, /) method of builtins.list instance
    Extend list by appending elements from the iterable.

>>> l2.extend(4,4,4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: extend() takes exactly one argument (3 given)
>>> l2.extend([4,4,4]) 
>>> l2
[1, 2, [1, 2, 3], 3, 4, 5, 6, 7, 8, 9, 10, 10, 2, 3, 4, [1, 2, 3], 4, 4, 4]